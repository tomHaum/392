void main(){
  my_str("testing my_str: it works if you see this message\n");  
  my_str("testing my_int: This should print values 1, -5, 0, 100000, 2147483647, -2147483647\n");
  my_int(1);
  my_char(' ');
  my_int(-5);
  my_char(' ');
  my_int(0);
  my_char(' ');
  my_int(100000);
  my_char(' ');
  my_int(2147483647);
  my_char(' ');
  my_int(-2147483647);
  my_str("testing my_alpha\n");
  my_alpha();
  my_str("testing my_digits\n");
  my_digits();
  
  my_str("testing my_strindex\n");
  my_str("test one: Null case (Should print -1)\n");
  my_int(my_strindex(0, '-'));
  my_char('\n');
  my_str("test two: empty string (Should print -1)\n");
  my_int(my_strindex("", '-'));
  my_char('\n');
  my_str("test three: string abc . char d. output -1\n");
  my_int(my_strindex("abc", 'd'));
  my_char('\n');
  my_str("test four: string hello, char h. output 0\n");
  my_int(my_strindex("hello", 'h'));
  my_char('\n');
  my_str("test five: string hello, char e. output 1\n");
  my_int(my_strindex("hello", 'e'));
  my_str("test six: string hello, char l. output 2\n");
  my_int(my_strindex("hello", 'l'));
  my_str("test seven: string hello, char o. output 4\n");
  my_int(my_strindex("hello", 'o'));
  my_char('\n');
  my_char('\n');

  my_str("testing my_strrindex\n");
  my_str("testing one: Null case (should print -1)\n");
  my_int(my_strrindex(0, 'a'));
  my_char('\n');
  my_str("testing two: empty string (should print -1)\n");
  my_int(my_strrindex("", 'a'));
  my_str("test three: string abc . char d. output -1\n");
  my_int(my_strrindex("abc", 'd'));
  my_char('\n');
  my_str("test four: string hello. char h. output 0\n");
  my_int(my_strrindex("hello", 'h'));
  my_char('\n');
  my_str("test five: string hello. char l. output 3\n");
  my_int(my_strrindex("hello", 'l'));
  my_char('\n');
  my_str("test five: string aaaaa, char a, output 4\n");
  my_int(my_strrindex("aaaaa", 'a'));
  my_char('\n');
  my_char('\n');

  my_str("testing my_strlen\n");
  my_str("test one: Null case (Should print -1)\n");
  my_int(my_strlen(0));
  my_char('\n');
  my_str("test two: empty string (Should print 0)\n");
  my_int(my_strlen(""));
  my_char('\n');
  my_str("test three: string a (Should print 1)\n");
  my_int(my_strlen("a"));
  my_char('\n');
  my_str("test four: string aaaaaaaaaa (Should print 10)\n");
  my_int(my_strlen("aaaaaaaaaa"));
  my_char('\n');
  my_char('\n');

  char str1[] = "";
  char str2[] = "a";
  char str3[] = "abcd";
  char str4[] = "abcde";
  my_str("testing my_revstr\n");
  my_str("test 1: Null case (Should print -1)\n");
  my_int(my_revstr(0));
  my_char('\n');
  my_str("test 2: Empty string (Should print 0, then empty line)\n");
  my_int(my_revstr(str1));
  my_char('\n');
  my_str(str1);
  my_char('\n');
  my_str("test 3: a (Should print 1, then a)\n");
  my_int(my_revstr(str2));
  my_char('\n');
  my_str(str2);
  my_char('\n');
  my_str("test 4: abcd (Should print 4, then dcba)\n");
  my_int(my_revstr(str3));
  my_char('\n');
  my_str(str3);
  my_char('\n');
  my_str("test 5: abcde (Should print 5, then edcba)\n");
  my_int(my_revstr(str4));
  my_char('\n');
  my_str(str4);
  my_char('\n');
  my_char('\n');

  my_str("testing my_num_base\n");
  my_str("test 1: NULL case (Should not blow up)\n");
  my_num_base(10, 0);
  my_char('\n');
  my_str("test 2: empty string (Should not blow up)\n");
  my_num_base(10, "");
  my_char('\n');
  my_str("test 3: Unary string, length 0 (Should print empty line)\n");
  my_num_base(0, "a");
  my_char('\n');
  my_str("test 4: Unary string a, number 1: should print a\n");
  my_num_base(1, "a");
  my_char('\n');
  my_str("test 5: Unary string a, number 5: should print aaaaa\n");
  my_num_base(5, "a");
  my_char('\n');
  my_str("test 6: Unary string a, number -8: should print -aaaaaaaa\n");
  my_num_base(-8, "a");
  my_char('\n');
  my_str("test 7: Binary string 01, number 0: should print 0\n");
  my_num_base(0, "01");
  my_char('\n');
  my_str("test 8: binary string 01, number 1: Should print 1\n");
  my_num_base(1, "01");
  my_char('\n');
  my_str("test 9: binary string 01, number 8: should print 1000\n");
  my_num_base(8, "01");
  my_char('\n');
  my_str("test 10: binary string 01, number -16: should print -10000\n");
  my_num_base(-16, "01");
  my_char('\n');
  my_str("test 11: tertiary string abc, number 0: should print a\n");
  my_num_base(0, "abc");
  my_char('\n');
  my_str("test 12: tertiary string abc, number 1: should print b\n");
  my_num_base(1, "abc");
  my_char('\n');
  my_str("test 13: tertiary string abc, number 26: should print ccc\n");
  my_num_base(26, "abc");
  my_char('\n');
  my_str("test 14: tertiary string abc, number -26: should print -ccc\n");
  my_num_base(-26, "abc");
  my_char('\n');
  //You can also test this with arbitrarily large ints (max int value or min in value), higher number bases, etc.
}
